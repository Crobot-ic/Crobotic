import{_ as i,c as e,ag as t,o as a}from"./chunks/framework.DqQpy2K-.js";const u=JSON.parse('{"title":"LE CODE","description":"","frontmatter":{},"headers":[],"relativePath":"Formations/Arduino/arduino-code.md","filePath":"Formations/Arduino/arduino-code.md"}'),n={name:"Formations/Arduino/arduino-code.md"};function o(l,s,r,p,d,c){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="le-code" tabindex="-1"><strong>LE CODE</strong> <a class="header-anchor" href="#le-code" aria-label="Permalink to &quot;**LE CODE**&quot;">‚Äã</a></h1><p>Un code Arduino est compos√© initialement de deux fonctions :</p><ul><li>Une fonction <code>setup</code> qui permet d‚Äôinitialiser les entr√©es et sorties de chaque Pin utilis√©. Vous devez sp√©cifier si une broche sera utilis√©e en tant qu&#39;entr√©e (<strong><code>INPUT</code></strong>) ou en tant que sortie (<strong><code>OUTPUT</code></strong>).</li></ul><blockquote><p>Pour un bouton, il faudra le mettre en Input, car on veut r√©cup√©rer les donn√©es lorsque celui-ci sera appuy√©</p></blockquote><blockquote><p>Une led sera donc mise en Output</p></blockquote><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bouton, INPUT)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Et la fonction <strong><code>loop</code></strong> contient le programme principal qui s&#39;ex√©cute en boucle. C&#39;est ici qu‚Äôil faut d√©finir les actions √† effectuer en fonction des entr√©es et des sorties.</li></ul><p>Pour interagir avec les entr√©es et sorties, vous pouvez utiliser les fonctions suivantes :</p><ul><li><strong><code>digitalWrite(nom_Led, √©tat)</code></strong>: Pour contr√¥ler une sortie num√©rique (LED, par exemple). L&#39;√©tat peut √™tre <strong><code>HIGH</code></strong> (√©lev√©) ou <strong><code>LOW</code></strong> (bas).</li><li><strong><code>digitalRead(bouton)</code></strong>: Pour lire l&#39;√©tat d&#39;une entr√©e num√©rique (bouton). La fonction renvoie <strong><code>HIGH</code></strong> si le bouton est enfonc√© et <strong><code>LOW</code></strong> sinon.</li></ul><h1 id="terminal-pour-debogage" tabindex="-1">Terminal pour d√©bogage <a class="header-anchor" href="#terminal-pour-debogage" aria-label="Permalink to &quot;Terminal pour d√©bogage&quot;">‚Äã</a></h1><p>En Arduino le terminal s‚Äôappelle le Moniteur en S√©rie. Il doit s‚Äôinitialiser en sp√©cifiant une vitesse de communication : <code>Serial.begin(9600)</code></p><p>Pour afficher un texte et une variable, il faudra utiliser <code>Serial.print(&quot;&quot;)</code> ou <code>Serial.println()</code>pour ajouter un retour √† la ligne.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;La valeur est : &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.tinkercad.com/things/f5BtLsEOKFx" target="_blank" rel="noreferrer"></a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>üí° <code>delay</code> permet de mettre en pause le programme : 1s =1000</p></div>`,15)]))}const k=i(n,[["render",o]]);export{u as __pageData,k as default};
